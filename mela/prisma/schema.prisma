// Bismillahirrahmanirahim
// Elhamdullillahirabbulalemin
//Es-selatu vesselamu ala rasulina Muhammedin ve ala alihi ve sahbihi, ecmain

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  mmavahi               Mmavahi[]
 
  bookmarks             Bookmark[]

  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  createdAt   DateTime      @default(now())
 
  whatsapp               String?
  contact                String?
  twoFactorCode          String?
  twoFactorCodeExpires   DateTime?

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Mmavahi {
  id          String  @id @default(cuid())
  content     String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  bookmarks Bookmark[]
  linkedNotifications Notification[]
  createdAt           DateTime       @default(now())
  // Ek alanlar
  title       String?
  price       String?
  category    String?
  address     String?
  whatsapp    String?
  contact     String?
  lat         Float?
  lng         Float?
  city        String?

  @@map("mmavahi")
}

model Media {
  id     String    @id @default(cuid())
  type   MediaType
  url    String
  createdAt     DateTime     @default(now())
  Mmavahi       Mmavahi?     @relation(fields: [mmavahiId], references: [id])
  mmavahiId     String?
  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  Mmavahi       Mmavahi?     @relation(fields: [mmavahiId], references: [id])
  mmavahiId     String?
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt     DateTime     @default(now())
  Mmavahi       Mmavahi?     @relation(fields: [mmavahiId], references: [id])
  mmavahiId     String?
  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
